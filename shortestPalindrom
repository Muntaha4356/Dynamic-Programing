class Solution {
public:
    string shortestPalindrome(string s) {
        string rev = s;
        reverse(rev.begin(), rev.end());
        string l = s + "#" + rev;
        
        vector<int> lps(l.size(), 0);  // Longest prefix suffix (KMP)
        for (int i = 1; i < l.size(); i++) {
            int j = lps[i - 1];
            while (j > 0 && l[i] != l[j]) {
                j = lps[j - 1];
            }
            if (l[i] == l[j]) {
                j++;
            }
            lps[i] = j;
        }

        string to_add = rev.substr(0, s.length() - lps.back());
        return to_add + s;
        }
};
